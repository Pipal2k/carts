@Library('dynatrace@master') _
@Library('keptn-library@5.1')
import sh.keptn.Keptn
def keptn = new sh.keptn.Keptn()

pipeline {
  agent {
    label 'kubegit'
  }
  
  parameters{
         string(defaultValue: 'stage', description: 'Stage of your Keptn project where tests are triggered in', name: 'stage', trim: false) 
         string(defaultValue: '', description: 'Keptn Context ID', name: 'shkeptncontext', trim: false) 
         string(defaultValue: '', description: 'Triggered ID', name: 'triggeredid', trim: false) 
        }
  
  environment {
    APP_NAME = "carts"
    KEPTN_PROJECT = "sockshop"
    KEPTN_SERVICE = "carts"
    KEPTN_STAGE = "staging"
    JMETER_VUCOUNT = 1
    JMETER_LOOPCOUNT = 4000
  }
  stages {
  
	stage('Initialize Keptn') {
		  steps{
			  script{
        		keptn.keptnInit project:"${env.KEPTN_PROJECT", service:"${env.KEPTN_SERVICE", stage:"${params.stage}"
			  }
		       }
    }
    
	stage('Update SLI/SLO') {
      steps{
      	checkout scm
        script {
          keptn.keptnAddResources('keptn/carts-sli.yaml','dynatrace/sli.yaml')
	  keptn.keptnAddResources('keptn/carts-slo.yaml','slo.yaml')
	  keptn.keptnAddResources('jmeter/${env.APP_NAME}_load.jmx','jmeter/load.jmx')
		  
        }
      }
      
    }

    stage('Warm up') {
      steps {
        //checkout scm
        echo "Waiting for the service to start..."
        container('kubectl') {
          script {
            def status = waitForDeployment (
              deploymentName: "${env.APP_NAME}",
              environment: "${params.stage}"
            )
            if(status !=0 ){
              currentBuild.result = 'FAILED'
              error "Deployment did not finish before timeout."
            }
          }
        }
        container('jmeter') {
          script {
            def status = executeJMeter ( 
              scriptName: "jmeter/${env.APP_NAME}_perfcheck.jmx",
              resultsDir: "PerfCheck_Warmup_${env.APP_NAME}_${BUILD_NUMBER}",
              serverUrl: "${env.APP_NAME}.staging", 
              serverPort: 80,
              checkPath: '/health',
              vuCount: 1,
              loopCount: 10,
              LTN: "PerfCheck_Warmup_${BUILD_NUMBER}",
              funcValidation: false,
              avgRtValidation: 4000
            )
            if (status != 0) {
              currentBuild.result = 'FAILED'
              error "Performance check failed."
            }
          }
        }
        

      }
    }
	
	stage('Mark Test Start Time') {
        steps {
            script {
				keptn.markEvaluationStartTime()
			}
		}
	}
			
    stage('Run Performance Test') {
      steps {

        container('jmeter') {
          script {
              
              def status = executeJMeter ( 
                scriptName: "jmeter/${env.APP_NAME}_perfcheck.jmx",
                resultsDir: "PerfCheck_${env.APP_NAME}_${BUILD_NUMBER}",
                serverUrl: "${env.APP_NAME}.staging", 
                serverPort: 80,
                checkPath: '/health',
                vuCount: env.JMETER_VUCOUNT.toInteger(),
                loopCount: env.JMETER_LOOPCOUNT.toInteger(),
                LTN: "PerfCheck_${BUILD_NUMBER}",
                funcValidation: false,
                avgRtValidation: 4000
              )
              if (status != 0) {
                currentBuild.result = 'FAILED'
                error "Performance check failed."
              }
            }
        }
      }
    }

    stage('Evaluate Build with Keptn') {
      steps {
        script {
          def keptnContext = keptn.sendFinishedEvent eventType: "test", keptnContext: "${params.shkeptncontext}", triggeredId: "${params.triggeredid}", result:"pass", status:"succeeded"
		  echo "Open Keptns Bridge: ${keptn_bridge}/trace/${keptnContext}"

        }
      }
    }
        
		
    }// end stages
} // end pipeline
