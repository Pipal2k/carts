@Library('dynatrace@master') _
import groovy.json.JsonSlurper
import groovy.json.JsonSlurperClassic

pipeline {
  agent {
    label 'git'
  }
  environment {
    APP_NAME = "carts"
    KEPTN_PROJECT = "sockshop-qg"
    KEPTN_SERVICE = "carts"
    KEPTN_STAGE = "hardening"
  }
  stages {
    stage('Warm up') {
      steps {
        checkout scm

        /*container('jmeter') {
          script {
            def status = executeJMeter ( 
              scriptName: "jmeter/${env.APP_NAME}_perfcheck.jmx",
              resultsDir: "PerfCheck_Warmup_${env.APP_NAME}_${BUILD_NUMBER}",
              serverUrl: "${env.APP_NAME}.staging", 
              serverPort: 80,
              checkPath: '/health',
              vuCount: 1,
              loopCount: 10,
              LTN: "PerfCheck_Warmup_${BUILD_NUMBER}",
              funcValidation: false,
              avgRtValidation: 4000
            )
            if (status != 0) {
              currentBuild.result = 'FAILED'
              error "Performance check failed."
            }
          }
        }
        
        echo "Waiting for a minute to not skew data in DT"
        sleep(60)*/
      }
    }

    stage('Performance Check') {
      steps {
        script {
            env.testStartTime = get_timestamp()
        }
        container('jmeter') {
          script {
              
              def status = executeJMeter ( 
                scriptName: "jmeter/${env.APP_NAME}_perfcheck.jmx",
                resultsDir: "PerfCheck_${env.APP_NAME}_${BUILD_NUMBER}",
                serverUrl: "${env.APP_NAME}.staging", 
                serverPort: 80,
                checkPath: '/health',
                vuCount: 10,
                loopCount: 1000,
                LTN: "PerfCheck_${BUILD_NUMBER}",
                funcValidation: false,
                avgRtValidation: 4000
              )
              if (status != 0) {
                currentBuild.result = 'FAILED'
                error "Performance check failed."
              }
            }
        }
        script {
            env.testEndTime = get_timestamp()
        }

        echo "Waiting for a minute so data can be processed in Dynatrace"
        sleep(60)
      }
    }
  
    stage('Evaluate Build with Keptn') {
        steps {
            script {
                println  "About to execute keptn evaluation"
                //Get the start time of the test
                //def startTime = get_timestamp()
                //def endTime = get_timestamp()
                
                //Define the Keptn Json payload for the evaluation request post
                def keptn_json = """
                {
                 "type": "sh.keptn.event.start-evaluation",
                 "source": "Jenkins",
                 "data": {
                    
                   "start": "${env.testStartTime}Z",
                    "end": "${env.testEndTime}Z",
                    "project": "${env.KEPTN_PROJECT}",
                    "stage": "${env.KEPTN_STAGE}",
                    "service": "${env.KEPTN_SERVICE}",
                    "teststrategy": "manual"
                  }
                  }
                 """
                println("About to evaluate the following: ");
                println(keptn_json);
                // "labels": {"environment": "yourenv","yourney": "youryourney"}

                //Post the start-evaluation event to Keptn API
                def kept_context_request = httpRequest contentType: 'APPLICATION_JSON', customHeaders: [[maskValue: true, name: 'x-token', value: "${env.KEPTN_API_TOKEN}"]], httpMode: 'POST', requestBody: keptn_json, responseHandle: 'STRING', url: "${env.KEPTN_URL}/v1/event", validResponseCodes: "100:404"
                
                //Parse response String 
                con_response = new JsonSlurperClassic().parseText( kept_context_request.getContent() )

                //con_response = new JsonSlurper().parseText( kept_context_request.getContent() )
                // Get the keptnContext Key
                //keptn_context_key = con_response.get("keptnContext")
                keptn_context_key = con_response.keptnContext;
                env.keptn_context = keptn_context_key;
                // URL Encode the context key
                encoded_context = URLEncoder.encode(keptn_context_key.toString().trim(), "UTF-8")
                
                //Create variable for The keptn Status Request
                def kept_status_request
                
                //Query the Keptn API every 20 Seconds to ge the evaluation Done Event.
                timeout(time: 3, unit: 'MINUTES') {
                    script {
                        waitUntil {
                            
                            // Post the Keptn Context to the Keptn api to get the Evaluation-done event
                            kept_status_request = httpRequest acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', customHeaders: [[maskValue: true, name: 'x-token', value: "${env.KEPTN_API_TOKEN}"]], httpMode: 'GET', responseHandle: 'STRING', url: "${env.KEPTN_URL}/v1/event?keptnContext=${encoded_context}&type=sh.keptn.events.evaluation-done", validResponseCodes: "100:500"
                            //The API returns a response code 500 error if the evalution done event does not exisit
                            if (kept_status_request.getStatus() == 500 || kept_status_request.getContent().toString().contains("No Keptn sh.keptn.events.evaluation-done event found for context") ) {
                                sleep 10
                                return false
                            } else {
                                return true
                            } 
                        }
                    }
                }
                println(kept_status_request.getContent())
                //Parse response String
                @NonCPS
                responseData = new JsonSlurper().parseText( kept_status_request.getContent() )
                
                keptn_result = responseData.data.result
                resultText = generateResult(responseData.data);
                
                env.evaluationDetails = resultText;
                env.evaluationResult = keptn_result;
                env.evaluationScore = responseData.data.evaluationdetails.score;
                env.keptn_evaluationContext = responseData.id;
                println(resultText);
               }
           }
        }
        stage('Send Notification to DT') {
            steps {
              container("curl") {
                script {
            
                    def tagMatchRules = [[ meTypes: [[meType: 'SERVICE']],
                                             tags : [[context: 'CONTEXTLESS', key: 'keptn_project', value: KEPTN_PROJECT],
                                                      [context: 'CONTEXTLESS', key: 'keptn_service', value: KEPTN_SERVICE],
                                                      [context: 'CONTEXTLESS', key: 'keptn_stage', value: KEPTN_STAGE]]
                                        ]];
                    // Push some Jenkins OOTB info to DT.
                    def customProps = [ 
                        "Evaluation Result": "${env.evaluationResult}", 
                        "Evaluation Score": "${env.evaluationScore}", 
                        "Jenkins Build Tag": "${BUILD_TAG}", 
                        "Jenkins Build URL": "${BUILD_URL}",
                        "Evaluation Details: "${env.KEPTN_BRIDGE}/project/${env.KEPTN_PROJECT}/${env.KEPTN_SERVICE}/${env.keptn_context}/${env.keptn_evaluationContext}"
                    ];
                    
                    def notification = new pushDynatraceInfoEvent();
                    notification.call(title: "Keptn Quality Gates Evaluation: ${env.evaluationResult}", source: 'Jenkins', description: 'Evaluated build score for this build.', tagRule: tagMatchRules, customProperties: customProps);
                }
             }
          }
        
        } // end stage
        stage('Evaluate Pipeline') {
            steps {
          
                script {
                    //if The Keptn result is "Fail", fail the build.
                    echo env.evaluationResult
                    if (env.evaluationResult == "fail") {
                        echo "[pipeline] FAILING PIPELINE Because Keptn Failed the Build";
                        currentBuild.currentResult = 'FAILURE';
                        error('Failing pipeline because keptn failed the build...');
                    }
                }
            }
        }// end stage
    }// end stages
} // end pipeline
def get_timestamp(){
    DATE_TAG = java.time.LocalDate.now()
    DATETIME_TAG = java.time.LocalDateTime.now()
    echo "${DATETIME_TAG}"
                
    return DATETIME_TAG
}

def generateResult(data) {
    def result = "Build result: " + data.result + "\n";
    result += "Build score: " + data.evaluationdetails.score + "\n";
    result += "Metrics overview: \n"
    for(def indicator: data.evaluationdetails.indicatorResults) {
        result += indicator.value.metric + ": \n"
        result += "  target: \n"
        for(def target: indicator.targets) {
            result += "    - " + target.criteria + "\n"
        }
        result += "  value: " + indicator.value.value + "\n"
        result += "  score: " + indicator.score + "\n"
    }

    return result;
}
